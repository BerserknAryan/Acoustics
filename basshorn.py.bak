import math

# Function to calculate horn path dimensions
def calculate_horn_dimensions(Fs, Qts, Vas_dm3, desired_T, desired_Fg):
    # Calculate throat area
    Ah = (2 * 3.14159 * Fs * Qts * Vas_dm3) / 343

    # Calculate mouth area
    if desired_T >= 1.0:
        # Hyperbolic taper
        Ax = Ah * (math.cosh(desired_T) + desired_T * math.sinh(desired_T))**2
    else:
        # Exponential taper
        Ax = Ah * math.exp(2 * desired_T)

    # Calculate horn length and taper rate
    if desired_T >= 1.0:
        # Hyperbolic taper
        L = math.log(Ax / Ah) * math.sqrt(Ax / Ah - 1)
        taper_rate = (math.sqrt(Ax / Ah - 1)) / L
    else:
        # Exponential taper
        L = None
        taper_rate = None

    return Ah, Ax, L, taper_rate

try:
    Fs = float(input("Enter Fs: "))
    Qts = float(input("Enter Qts: "))
    Vas_liters = float(input("Enter Vas in liters: "))
    drivers = float(input("Enter number of drivers: "))
    horns = float(input("Enter number of horns: "))
    desired_T = float(input("Enter desired T (0.1-10): "))
    desired_Fg = float(input("Enter desired frequency at -3dB start (Hz): "))

    # Convert Vas from liters to cubic decimeters (dm^3)
    Vas_dm3 = Vas_liters * 1000

    print("Calculating horn dimensions...")

    # Calculate horn dimensions
    Ah, Ax, L, taper_rate = calculate_horn_dimensions(Fs, Qts, Vas_dm3, desired_T, desired_Fg)

    # Print horn dimensions
    print("Throat Area (Ah) in square meters: ", Ah)
    print("Mouth Area (Ax) in square meters: ", Ax)
    print("Horn Length (L) in meters: ", L)
    print("Taper Rate: ", taper_rate)

    # Print cutsheet
    print("Cutsheet for building the enclosure:")
    print("Throat Area (Ah): ", Ah, " square meters")
    print("Mouth Area (Ax): ", Ax, " square meters")
    print("Horn Length (L): ", L, " meters")
    print("Taper Rate: ", taper_rate)

    print("Where is this horn going?")
    print("0 free space, 2 on floor, 4 on floor against wall, 8 in a corner")

    location_of_horn = int(input("Enter location of horn: "))
    Amt = (343 * 343 / (4 * 3.14159 * desired_Fg * desired_Fg)) / location_of_horn
    print("Assuming that the horn is of infinite length and the wavelength 'fits' the horn then the mouth area Am must comply to formula:")
    print(Amt)

    print("When the mouth area Am of two horns are placed beside each other, then the result will")
    print("be better performance in the lowest bass because the area is now doubled.")
    print("The next formula can be used to see if we can lower the frequency Fg by the enlargement")
    print("of Am.")

    print("Mind in the calculation where you want to place the horn, by placement in the corner")
    print("the surface Amt must be multiplied by 8!")

    Fg = math.sqrt(343 * 343 / (4 * 3.14159 * Amt))
    print(Fg)

    print("Back chamber:")

    # Separate routes for single drivers and multiple drivers in one enclosure
    if drivers == 1:
        Vb = Vas_dm3 / ((Fg / (Fs * Qts)) - 1)
    else:
        effective_Vas = Vas_dm3 * drivers
        Vb = (effective_Vas * Fs * Qts) / Fg

    compression_chamber = input("Do you have a compression chamber? (yes/no): ")

    if compression_chamber.lower() == "yes":
        Vf_liters = float(input("Enter volume of compression chamber in liters: "))
        # Convert Vf from liters to cubic decimeters (dm^3)
        Vf_dm3 = Vf_liters * 1000
        crossover = 2 * Qts * Fs * (effective_Vas / Vf_dm3)
        print("-3dB crossover point is", crossover)
    else:
        print("Pass")

except ValueError:
    print("Error: Please enter valid numerical values.")
